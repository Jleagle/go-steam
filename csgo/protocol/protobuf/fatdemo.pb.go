// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fatdemo.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package protobuf is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package protobuf to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EHitGroup int32

const (
	EHitGroup_EHG_Generic  EHitGroup = 0
	EHitGroup_EHG_Head     EHitGroup = 1
	EHitGroup_EHG_Chest    EHitGroup = 2
	EHitGroup_EHG_Stomach  EHitGroup = 3
	EHitGroup_EHG_LeftArm  EHitGroup = 4
	EHitGroup_EHG_RightArm EHitGroup = 5
	EHitGroup_EHG_LeftLeg  EHitGroup = 6
	EHitGroup_EHG_RightLeg EHitGroup = 7
	EHitGroup_EHG_Gear     EHitGroup = 8
	EHitGroup_EHG_Miss     EHitGroup = 9
)

var EHitGroup_name = map[int32]string{
	0: "EHG_Generic",
	1: "EHG_Head",
	2: "EHG_Chest",
	3: "EHG_Stomach",
	4: "EHG_LeftArm",
	5: "EHG_RightArm",
	6: "EHG_LeftLeg",
	7: "EHG_RightLeg",
	8: "EHG_Gear",
	9: "EHG_Miss",
}

var EHitGroup_value = map[string]int32{
	"EHG_Generic":  0,
	"EHG_Head":     1,
	"EHG_Chest":    2,
	"EHG_Stomach":  3,
	"EHG_LeftArm":  4,
	"EHG_RightArm": 5,
	"EHG_LeftLeg":  6,
	"EHG_RightLeg": 7,
	"EHG_Gear":     8,
	"EHG_Miss":     9,
}

func (x EHitGroup) Enum() *EHitGroup {
	p := new(EHitGroup)
	*p = x
	return p
}

func (x EHitGroup) String() string {
	return proto.EnumName(EHitGroup_name, int32(x))
}

func (x *EHitGroup) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EHitGroup_value, data, "EHitGroup")
	if err != nil {
		return err
	}
	*x = EHitGroup(value)
	return nil
}

func (EHitGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{0}
}

type ETeam int32

const (
	ETeam_ET_Unknown   ETeam = 0
	ETeam_ET_Spectator ETeam = 1
	ETeam_ET_Terrorist ETeam = 2
	ETeam_ET_CT        ETeam = 3
)

var ETeam_name = map[int32]string{
	0: "ET_Unknown",
	1: "ET_Spectator",
	2: "ET_Terrorist",
	3: "ET_CT",
}

var ETeam_value = map[string]int32{
	"ET_Unknown":   0,
	"ET_Spectator": 1,
	"ET_Terrorist": 2,
	"ET_CT":        3,
}

func (x ETeam) Enum() *ETeam {
	p := new(ETeam)
	*p = x
	return p
}

func (x ETeam) String() string {
	return proto.EnumName(ETeam_name, int32(x))
}

func (x *ETeam) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETeam_value, data, "ETeam")
	if err != nil {
		return err
	}
	*x = ETeam(value)
	return nil
}

func (ETeam) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{1}
}

type EWeaponType int32

const (
	EWeaponType_EWT_Knife         EWeaponType = 0
	EWeaponType_EWT_Pistol        EWeaponType = 1
	EWeaponType_EWT_SubMachineGun EWeaponType = 2
	EWeaponType_EWT_Rifle         EWeaponType = 3
	EWeaponType_EWT_Shotgun       EWeaponType = 4
	EWeaponType_EWT_SniperRifle   EWeaponType = 5
	EWeaponType_EWT_MachineGun    EWeaponType = 6
	EWeaponType_EWT_C4            EWeaponType = 7
	EWeaponType_EWT_Grenade       EWeaponType = 8
	EWeaponType_EWT_Equipment     EWeaponType = 9
	EWeaponType_EWT_StackableItem EWeaponType = 10
	EWeaponType_EWT_Unknown       EWeaponType = 11
)

var EWeaponType_name = map[int32]string{
	0:  "EWT_Knife",
	1:  "EWT_Pistol",
	2:  "EWT_SubMachineGun",
	3:  "EWT_Rifle",
	4:  "EWT_Shotgun",
	5:  "EWT_SniperRifle",
	6:  "EWT_MachineGun",
	7:  "EWT_C4",
	8:  "EWT_Grenade",
	9:  "EWT_Equipment",
	10: "EWT_StackableItem",
	11: "EWT_Unknown",
}

var EWeaponType_value = map[string]int32{
	"EWT_Knife":         0,
	"EWT_Pistol":        1,
	"EWT_SubMachineGun": 2,
	"EWT_Rifle":         3,
	"EWT_Shotgun":       4,
	"EWT_SniperRifle":   5,
	"EWT_MachineGun":    6,
	"EWT_C4":            7,
	"EWT_Grenade":       8,
	"EWT_Equipment":     9,
	"EWT_StackableItem": 10,
	"EWT_Unknown":       11,
}

func (x EWeaponType) Enum() *EWeaponType {
	p := new(EWeaponType)
	*p = x
	return p
}

func (x EWeaponType) String() string {
	return proto.EnumName(EWeaponType_name, int32(x))
}

func (x *EWeaponType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EWeaponType_value, data, "EWeaponType")
	if err != nil {
		return err
	}
	*x = EWeaponType(value)
	return nil
}

func (EWeaponType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{2}
}

type MLDict struct {
	Key                  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ValString            *string  `protobuf:"bytes,2,opt,name=val_string,json=valString" json:"val_string,omitempty"`
	ValInt               *int32   `protobuf:"varint,3,opt,name=val_int,json=valInt" json:"val_int,omitempty"`
	ValFloat             *float32 `protobuf:"fixed32,4,opt,name=val_float,json=valFloat" json:"val_float,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MLDict) Reset()         { *m = MLDict{} }
func (m *MLDict) String() string { return proto.CompactTextString(m) }
func (*MLDict) ProtoMessage()    {}
func (*MLDict) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{0}
}

func (m *MLDict) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLDict.Unmarshal(m, b)
}
func (m *MLDict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLDict.Marshal(b, m, deterministic)
}
func (m *MLDict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLDict.Merge(m, src)
}
func (m *MLDict) XXX_Size() int {
	return xxx_messageInfo_MLDict.Size(m)
}
func (m *MLDict) XXX_DiscardUnknown() {
	xxx_messageInfo_MLDict.DiscardUnknown(m)
}

var xxx_messageInfo_MLDict proto.InternalMessageInfo

func (m *MLDict) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *MLDict) GetValString() string {
	if m != nil && m.ValString != nil {
		return *m.ValString
	}
	return ""
}

func (m *MLDict) GetValInt() int32 {
	if m != nil && m.ValInt != nil {
		return *m.ValInt
	}
	return 0
}

func (m *MLDict) GetValFloat() float32 {
	if m != nil && m.ValFloat != nil {
		return *m.ValFloat
	}
	return 0
}

type MLEvent struct {
	EventName            *string   `protobuf:"bytes,1,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	Data                 []*MLDict `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MLEvent) Reset()         { *m = MLEvent{} }
func (m *MLEvent) String() string { return proto.CompactTextString(m) }
func (*MLEvent) ProtoMessage()    {}
func (*MLEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{1}
}

func (m *MLEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLEvent.Unmarshal(m, b)
}
func (m *MLEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLEvent.Marshal(b, m, deterministic)
}
func (m *MLEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLEvent.Merge(m, src)
}
func (m *MLEvent) XXX_Size() int {
	return xxx_messageInfo_MLEvent.Size(m)
}
func (m *MLEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MLEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MLEvent proto.InternalMessageInfo

func (m *MLEvent) GetEventName() string {
	if m != nil && m.EventName != nil {
		return *m.EventName
	}
	return ""
}

func (m *MLEvent) GetData() []*MLDict {
	if m != nil {
		return m.Data
	}
	return nil
}

type MLMatchState struct {
	GameMode             *string  `protobuf:"bytes,1,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	Phase                *string  `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Round                *int32   `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	ScoreCt              *int32   `protobuf:"varint,4,opt,name=score_ct,json=scoreCt" json:"score_ct,omitempty"`
	ScoreT               *int32   `protobuf:"varint,5,opt,name=score_t,json=scoreT" json:"score_t,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MLMatchState) Reset()         { *m = MLMatchState{} }
func (m *MLMatchState) String() string { return proto.CompactTextString(m) }
func (*MLMatchState) ProtoMessage()    {}
func (*MLMatchState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{2}
}

func (m *MLMatchState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLMatchState.Unmarshal(m, b)
}
func (m *MLMatchState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLMatchState.Marshal(b, m, deterministic)
}
func (m *MLMatchState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLMatchState.Merge(m, src)
}
func (m *MLMatchState) XXX_Size() int {
	return xxx_messageInfo_MLMatchState.Size(m)
}
func (m *MLMatchState) XXX_DiscardUnknown() {
	xxx_messageInfo_MLMatchState.DiscardUnknown(m)
}

var xxx_messageInfo_MLMatchState proto.InternalMessageInfo

func (m *MLMatchState) GetGameMode() string {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return ""
}

func (m *MLMatchState) GetPhase() string {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return ""
}

func (m *MLMatchState) GetRound() int32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *MLMatchState) GetScoreCt() int32 {
	if m != nil && m.ScoreCt != nil {
		return *m.ScoreCt
	}
	return 0
}

func (m *MLMatchState) GetScoreT() int32 {
	if m != nil && m.ScoreT != nil {
		return *m.ScoreT
	}
	return 0
}

type MLRoundState struct {
	Phase                *string  `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	WinTeam              *ETeam   `protobuf:"varint,2,opt,name=win_team,json=winTeam,enum=ETeam,def=0" json:"win_team,omitempty"`
	BombState            *string  `protobuf:"bytes,3,opt,name=bomb_state,json=bombState" json:"bomb_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MLRoundState) Reset()         { *m = MLRoundState{} }
func (m *MLRoundState) String() string { return proto.CompactTextString(m) }
func (*MLRoundState) ProtoMessage()    {}
func (*MLRoundState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{3}
}

func (m *MLRoundState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLRoundState.Unmarshal(m, b)
}
func (m *MLRoundState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLRoundState.Marshal(b, m, deterministic)
}
func (m *MLRoundState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLRoundState.Merge(m, src)
}
func (m *MLRoundState) XXX_Size() int {
	return xxx_messageInfo_MLRoundState.Size(m)
}
func (m *MLRoundState) XXX_DiscardUnknown() {
	xxx_messageInfo_MLRoundState.DiscardUnknown(m)
}

var xxx_messageInfo_MLRoundState proto.InternalMessageInfo

const Default_MLRoundState_WinTeam ETeam = ETeam_ET_Unknown

func (m *MLRoundState) GetPhase() string {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return ""
}

func (m *MLRoundState) GetWinTeam() ETeam {
	if m != nil && m.WinTeam != nil {
		return *m.WinTeam
	}
	return Default_MLRoundState_WinTeam
}

func (m *MLRoundState) GetBombState() string {
	if m != nil && m.BombState != nil {
		return *m.BombState
	}
	return ""
}

type MLWeaponState struct {
	Index                *int32       `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Name                 *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type                 *EWeaponType `protobuf:"varint,3,opt,name=type,enum=EWeaponType,def=0" json:"type,omitempty"`
	AmmoClip             *int32       `protobuf:"varint,4,opt,name=ammo_clip,json=ammoClip" json:"ammo_clip,omitempty"`
	AmmoClipMax          *int32       `protobuf:"varint,5,opt,name=ammo_clip_max,json=ammoClipMax" json:"ammo_clip_max,omitempty"`
	AmmoReserve          *int32       `protobuf:"varint,6,opt,name=ammo_reserve,json=ammoReserve" json:"ammo_reserve,omitempty"`
	State                *string      `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	RecoilIndex          *float32     `protobuf:"fixed32,8,opt,name=recoil_index,json=recoilIndex" json:"recoil_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MLWeaponState) Reset()         { *m = MLWeaponState{} }
func (m *MLWeaponState) String() string { return proto.CompactTextString(m) }
func (*MLWeaponState) ProtoMessage()    {}
func (*MLWeaponState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{4}
}

func (m *MLWeaponState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLWeaponState.Unmarshal(m, b)
}
func (m *MLWeaponState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLWeaponState.Marshal(b, m, deterministic)
}
func (m *MLWeaponState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLWeaponState.Merge(m, src)
}
func (m *MLWeaponState) XXX_Size() int {
	return xxx_messageInfo_MLWeaponState.Size(m)
}
func (m *MLWeaponState) XXX_DiscardUnknown() {
	xxx_messageInfo_MLWeaponState.DiscardUnknown(m)
}

var xxx_messageInfo_MLWeaponState proto.InternalMessageInfo

const Default_MLWeaponState_Type EWeaponType = EWeaponType_EWT_Knife

func (m *MLWeaponState) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *MLWeaponState) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MLWeaponState) GetType() EWeaponType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_MLWeaponState_Type
}

func (m *MLWeaponState) GetAmmoClip() int32 {
	if m != nil && m.AmmoClip != nil {
		return *m.AmmoClip
	}
	return 0
}

func (m *MLWeaponState) GetAmmoClipMax() int32 {
	if m != nil && m.AmmoClipMax != nil {
		return *m.AmmoClipMax
	}
	return 0
}

func (m *MLWeaponState) GetAmmoReserve() int32 {
	if m != nil && m.AmmoReserve != nil {
		return *m.AmmoReserve
	}
	return 0
}

func (m *MLWeaponState) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *MLWeaponState) GetRecoilIndex() float32 {
	if m != nil && m.RecoilIndex != nil {
		return *m.RecoilIndex
	}
	return 0
}

type MLPlayerState struct {
	AccountId            *int32           `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId               *int32           `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Entindex             *int32           `protobuf:"varint,3,opt,name=entindex" json:"entindex,omitempty"`
	Name                 *string          `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Clan                 *string          `protobuf:"bytes,5,opt,name=clan" json:"clan,omitempty"`
	Team                 *ETeam           `protobuf:"varint,6,opt,name=team,enum=ETeam,def=0" json:"team,omitempty"`
	Abspos               *CMsgVector      `protobuf:"bytes,7,opt,name=abspos" json:"abspos,omitempty"`
	Eyeangle             *CMsgQAngle      `protobuf:"bytes,8,opt,name=eyeangle" json:"eyeangle,omitempty"`
	EyeangleFwd          *CMsgVector      `protobuf:"bytes,9,opt,name=eyeangle_fwd,json=eyeangleFwd" json:"eyeangle_fwd,omitempty"`
	Health               *int32           `protobuf:"varint,10,opt,name=health" json:"health,omitempty"`
	Armor                *int32           `protobuf:"varint,11,opt,name=armor" json:"armor,omitempty"`
	Flashed              *float32         `protobuf:"fixed32,12,opt,name=flashed" json:"flashed,omitempty"`
	Smoked               *float32         `protobuf:"fixed32,13,opt,name=smoked" json:"smoked,omitempty"`
	Money                *int32           `protobuf:"varint,14,opt,name=money" json:"money,omitempty"`
	RoundKills           *int32           `protobuf:"varint,15,opt,name=round_kills,json=roundKills" json:"round_kills,omitempty"`
	RoundKillhs          *int32           `protobuf:"varint,16,opt,name=round_killhs,json=roundKillhs" json:"round_killhs,omitempty"`
	Burning              *float32         `protobuf:"fixed32,17,opt,name=burning" json:"burning,omitempty"`
	Helmet               *bool            `protobuf:"varint,18,opt,name=helmet" json:"helmet,omitempty"`
	DefuseKit            *bool            `protobuf:"varint,19,opt,name=defuse_kit,json=defuseKit" json:"defuse_kit,omitempty"`
	Weapons              []*MLWeaponState `protobuf:"bytes,20,rep,name=weapons" json:"weapons,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MLPlayerState) Reset()         { *m = MLPlayerState{} }
func (m *MLPlayerState) String() string { return proto.CompactTextString(m) }
func (*MLPlayerState) ProtoMessage()    {}
func (*MLPlayerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{5}
}

func (m *MLPlayerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLPlayerState.Unmarshal(m, b)
}
func (m *MLPlayerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLPlayerState.Marshal(b, m, deterministic)
}
func (m *MLPlayerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLPlayerState.Merge(m, src)
}
func (m *MLPlayerState) XXX_Size() int {
	return xxx_messageInfo_MLPlayerState.Size(m)
}
func (m *MLPlayerState) XXX_DiscardUnknown() {
	xxx_messageInfo_MLPlayerState.DiscardUnknown(m)
}

var xxx_messageInfo_MLPlayerState proto.InternalMessageInfo

const Default_MLPlayerState_Team ETeam = ETeam_ET_Unknown

func (m *MLPlayerState) GetAccountId() int32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *MLPlayerState) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *MLPlayerState) GetEntindex() int32 {
	if m != nil && m.Entindex != nil {
		return *m.Entindex
	}
	return 0
}

func (m *MLPlayerState) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MLPlayerState) GetClan() string {
	if m != nil && m.Clan != nil {
		return *m.Clan
	}
	return ""
}

func (m *MLPlayerState) GetTeam() ETeam {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_MLPlayerState_Team
}

func (m *MLPlayerState) GetAbspos() *CMsgVector {
	if m != nil {
		return m.Abspos
	}
	return nil
}

func (m *MLPlayerState) GetEyeangle() *CMsgQAngle {
	if m != nil {
		return m.Eyeangle
	}
	return nil
}

func (m *MLPlayerState) GetEyeangleFwd() *CMsgVector {
	if m != nil {
		return m.EyeangleFwd
	}
	return nil
}

func (m *MLPlayerState) GetHealth() int32 {
	if m != nil && m.Health != nil {
		return *m.Health
	}
	return 0
}

func (m *MLPlayerState) GetArmor() int32 {
	if m != nil && m.Armor != nil {
		return *m.Armor
	}
	return 0
}

func (m *MLPlayerState) GetFlashed() float32 {
	if m != nil && m.Flashed != nil {
		return *m.Flashed
	}
	return 0
}

func (m *MLPlayerState) GetSmoked() float32 {
	if m != nil && m.Smoked != nil {
		return *m.Smoked
	}
	return 0
}

func (m *MLPlayerState) GetMoney() int32 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *MLPlayerState) GetRoundKills() int32 {
	if m != nil && m.RoundKills != nil {
		return *m.RoundKills
	}
	return 0
}

func (m *MLPlayerState) GetRoundKillhs() int32 {
	if m != nil && m.RoundKillhs != nil {
		return *m.RoundKillhs
	}
	return 0
}

func (m *MLPlayerState) GetBurning() float32 {
	if m != nil && m.Burning != nil {
		return *m.Burning
	}
	return 0
}

func (m *MLPlayerState) GetHelmet() bool {
	if m != nil && m.Helmet != nil {
		return *m.Helmet
	}
	return false
}

func (m *MLPlayerState) GetDefuseKit() bool {
	if m != nil && m.DefuseKit != nil {
		return *m.DefuseKit
	}
	return false
}

func (m *MLPlayerState) GetWeapons() []*MLWeaponState {
	if m != nil {
		return m.Weapons
	}
	return nil
}

type MLGameState struct {
	Match                *MLMatchState    `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Round                *MLRoundState    `protobuf:"bytes,2,opt,name=round" json:"round,omitempty"`
	Players              []*MLPlayerState `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MLGameState) Reset()         { *m = MLGameState{} }
func (m *MLGameState) String() string { return proto.CompactTextString(m) }
func (*MLGameState) ProtoMessage()    {}
func (*MLGameState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{6}
}

func (m *MLGameState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLGameState.Unmarshal(m, b)
}
func (m *MLGameState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLGameState.Marshal(b, m, deterministic)
}
func (m *MLGameState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLGameState.Merge(m, src)
}
func (m *MLGameState) XXX_Size() int {
	return xxx_messageInfo_MLGameState.Size(m)
}
func (m *MLGameState) XXX_DiscardUnknown() {
	xxx_messageInfo_MLGameState.DiscardUnknown(m)
}

var xxx_messageInfo_MLGameState proto.InternalMessageInfo

func (m *MLGameState) GetMatch() *MLMatchState {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *MLGameState) GetRound() *MLRoundState {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *MLGameState) GetPlayers() []*MLPlayerState {
	if m != nil {
		return m.Players
	}
	return nil
}

type MLDemoHeader struct {
	MapName              *string  `protobuf:"bytes,1,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	TickRate             *int32   `protobuf:"varint,2,opt,name=tick_rate,json=tickRate" json:"tick_rate,omitempty"`
	Version              *uint32  `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	SteamUniverse        *uint32  `protobuf:"varint,4,opt,name=steam_universe,json=steamUniverse" json:"steam_universe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MLDemoHeader) Reset()         { *m = MLDemoHeader{} }
func (m *MLDemoHeader) String() string { return proto.CompactTextString(m) }
func (*MLDemoHeader) ProtoMessage()    {}
func (*MLDemoHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{7}
}

func (m *MLDemoHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLDemoHeader.Unmarshal(m, b)
}
func (m *MLDemoHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLDemoHeader.Marshal(b, m, deterministic)
}
func (m *MLDemoHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLDemoHeader.Merge(m, src)
}
func (m *MLDemoHeader) XXX_Size() int {
	return xxx_messageInfo_MLDemoHeader.Size(m)
}
func (m *MLDemoHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MLDemoHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MLDemoHeader proto.InternalMessageInfo

func (m *MLDemoHeader) GetMapName() string {
	if m != nil && m.MapName != nil {
		return *m.MapName
	}
	return ""
}

func (m *MLDemoHeader) GetTickRate() int32 {
	if m != nil && m.TickRate != nil {
		return *m.TickRate
	}
	return 0
}

func (m *MLDemoHeader) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *MLDemoHeader) GetSteamUniverse() uint32 {
	if m != nil && m.SteamUniverse != nil {
		return *m.SteamUniverse
	}
	return 0
}

type MLTick struct {
	TickCount            *int32       `protobuf:"varint,1,opt,name=tick_count,json=tickCount" json:"tick_count,omitempty"`
	State                *MLGameState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Events               []*MLEvent   `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MLTick) Reset()         { *m = MLTick{} }
func (m *MLTick) String() string { return proto.CompactTextString(m) }
func (*MLTick) ProtoMessage()    {}
func (*MLTick) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{8}
}

func (m *MLTick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLTick.Unmarshal(m, b)
}
func (m *MLTick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLTick.Marshal(b, m, deterministic)
}
func (m *MLTick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLTick.Merge(m, src)
}
func (m *MLTick) XXX_Size() int {
	return xxx_messageInfo_MLTick.Size(m)
}
func (m *MLTick) XXX_DiscardUnknown() {
	xxx_messageInfo_MLTick.DiscardUnknown(m)
}

var xxx_messageInfo_MLTick proto.InternalMessageInfo

func (m *MLTick) GetTickCount() int32 {
	if m != nil && m.TickCount != nil {
		return *m.TickCount
	}
	return 0
}

func (m *MLTick) GetState() *MLGameState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *MLTick) GetEvents() []*MLEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type VacNetShot struct {
	SteamidPlayer        *uint64   `protobuf:"fixed64,1,opt,name=steamid_player,json=steamidPlayer" json:"steamid_player,omitempty"`
	RoundNumber          *int32    `protobuf:"varint,2,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	HitType              *int32    `protobuf:"varint,3,opt,name=hit_type,json=hitType" json:"hit_type,omitempty"`
	WeaponType           *int32    `protobuf:"varint,4,opt,name=weapon_type,json=weaponType" json:"weapon_type,omitempty"`
	DistanceToHurtTarget *float32  `protobuf:"fixed32,5,opt,name=distance_to_hurt_target,json=distanceToHurtTarget" json:"distance_to_hurt_target,omitempty"`
	DeltaYawWindow       []float32 `protobuf:"fixed32,6,rep,name=delta_yaw_window,json=deltaYawWindow" json:"delta_yaw_window,omitempty"`
	DeltaPitchWindow     []float32 `protobuf:"fixed32,7,rep,name=delta_pitch_window,json=deltaPitchWindow" json:"delta_pitch_window,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VacNetShot) Reset()         { *m = VacNetShot{} }
func (m *VacNetShot) String() string { return proto.CompactTextString(m) }
func (*VacNetShot) ProtoMessage()    {}
func (*VacNetShot) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5902060817411f4, []int{9}
}

func (m *VacNetShot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VacNetShot.Unmarshal(m, b)
}
func (m *VacNetShot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VacNetShot.Marshal(b, m, deterministic)
}
func (m *VacNetShot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VacNetShot.Merge(m, src)
}
func (m *VacNetShot) XXX_Size() int {
	return xxx_messageInfo_VacNetShot.Size(m)
}
func (m *VacNetShot) XXX_DiscardUnknown() {
	xxx_messageInfo_VacNetShot.DiscardUnknown(m)
}

var xxx_messageInfo_VacNetShot proto.InternalMessageInfo

func (m *VacNetShot) GetSteamidPlayer() uint64 {
	if m != nil && m.SteamidPlayer != nil {
		return *m.SteamidPlayer
	}
	return 0
}

func (m *VacNetShot) GetRoundNumber() int32 {
	if m != nil && m.RoundNumber != nil {
		return *m.RoundNumber
	}
	return 0
}

func (m *VacNetShot) GetHitType() int32 {
	if m != nil && m.HitType != nil {
		return *m.HitType
	}
	return 0
}

func (m *VacNetShot) GetWeaponType() int32 {
	if m != nil && m.WeaponType != nil {
		return *m.WeaponType
	}
	return 0
}

func (m *VacNetShot) GetDistanceToHurtTarget() float32 {
	if m != nil && m.DistanceToHurtTarget != nil {
		return *m.DistanceToHurtTarget
	}
	return 0
}

func (m *VacNetShot) GetDeltaYawWindow() []float32 {
	if m != nil {
		return m.DeltaYawWindow
	}
	return nil
}

func (m *VacNetShot) GetDeltaPitchWindow() []float32 {
	if m != nil {
		return m.DeltaPitchWindow
	}
	return nil
}

func init() {
	proto.RegisterEnum("EHitGroup", EHitGroup_name, EHitGroup_value)
	proto.RegisterEnum("ETeam", ETeam_name, ETeam_value)
	proto.RegisterEnum("EWeaponType", EWeaponType_name, EWeaponType_value)
	proto.RegisterType((*MLDict)(nil), "MLDict")
	proto.RegisterType((*MLEvent)(nil), "MLEvent")
	proto.RegisterType((*MLMatchState)(nil), "MLMatchState")
	proto.RegisterType((*MLRoundState)(nil), "MLRoundState")
	proto.RegisterType((*MLWeaponState)(nil), "MLWeaponState")
	proto.RegisterType((*MLPlayerState)(nil), "MLPlayerState")
	proto.RegisterType((*MLGameState)(nil), "MLGameState")
	proto.RegisterType((*MLDemoHeader)(nil), "MLDemoHeader")
	proto.RegisterType((*MLTick)(nil), "MLTick")
	proto.RegisterType((*VacNetShot)(nil), "VacNetShot")
}

func init() { proto.RegisterFile("fatdemo.proto", fileDescriptor_c5902060817411f4) }

var fileDescriptor_c5902060817411f4 = []byte{
	// 1329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xcd, 0x8e, 0xdb, 0x46,
	0x12, 0xb6, 0x34, 0xfa, 0x63, 0xe9, 0xc7, 0x9c, 0xb6, 0x77, 0xcd, 0xb5, 0x61, 0xec, 0xac, 0x8c,
	0x4d, 0x04, 0x27, 0xd1, 0x61, 0x90, 0x5c, 0x7c, 0x33, 0xc6, 0xb2, 0x66, 0xe0, 0x91, 0xe1, 0x70,
	0x64, 0x0f, 0x72, 0x22, 0x7a, 0xc8, 0x92, 0xd8, 0x10, 0xd9, 0xcd, 0x34, 0x5b, 0x23, 0xcf, 0x31,
	0xc8, 0x21, 0x87, 0x3c, 0x45, 0xee, 0x79, 0xac, 0x20, 0xcf, 0x11, 0x54, 0x37, 0x29, 0xcb, 0x08,
	0x72, 0x63, 0x7d, 0xf5, 0xb1, 0x7e, 0xbe, 0xae, 0xae, 0x86, 0xe1, 0x8a, 0x9b, 0x04, 0x73, 0x35,
	0x2d, 0xb4, 0x32, 0xea, 0xf1, 0xb1, 0x44, 0x93, 0x63, 0x59, 0xf2, 0x35, 0x96, 0x0e, 0x1a, 0x2b,
	0xe8, 0x2c, 0x2e, 0x5f, 0x89, 0xd8, 0x30, 0x1f, 0x8e, 0x36, 0x78, 0x17, 0x34, 0x4e, 0x1a, 0x13,
	0x2f, 0xa4, 0x4f, 0xf6, 0x14, 0xe0, 0x96, 0x67, 0x51, 0x69, 0xb4, 0x90, 0xeb, 0xa0, 0x69, 0x1d,
	0xde, 0x2d, 0xcf, 0xae, 0x2c, 0xc0, 0x1e, 0x41, 0x97, 0xdc, 0x42, 0x9a, 0xe0, 0xe8, 0xa4, 0x31,
	0x69, 0x87, 0x9d, 0x5b, 0x9e, 0x5d, 0x48, 0xc3, 0x9e, 0x00, 0xb1, 0xa2, 0x55, 0xa6, 0xb8, 0x09,
	0x5a, 0x27, 0x8d, 0x49, 0x33, 0xec, 0xdd, 0xf2, 0xec, 0x35, 0xd9, 0xe3, 0x19, 0x74, 0x17, 0x97,
	0xb3, 0x5b, 0x94, 0x86, 0xe2, 0x23, 0x7d, 0x44, 0x92, 0xe7, 0x58, 0x25, 0xf6, 0x2c, 0xf2, 0x96,
	0xe7, 0xc8, 0x9e, 0x40, 0x2b, 0xe1, 0x86, 0x07, 0xcd, 0x93, 0xa3, 0x49, 0xff, 0xb4, 0x3b, 0x75,
	0x75, 0x86, 0x16, 0x1c, 0xff, 0xda, 0x80, 0xc1, 0xe2, 0x72, 0xc1, 0x4d, 0x9c, 0x5e, 0x19, 0x6e,
	0x88, 0xed, 0xad, 0x79, 0x8e, 0x51, 0xae, 0x92, 0x3a, 0x56, 0x8f, 0x80, 0x85, 0x4a, 0x90, 0x3d,
	0x84, 0x76, 0x91, 0xf2, 0x12, 0xab, 0x26, 0x9c, 0x41, 0xa8, 0x56, 0x5b, 0x99, 0x54, 0xe5, 0x3b,
	0x83, 0xfd, 0x07, 0x7a, 0x65, 0xac, 0x34, 0x46, 0xb1, 0x2b, 0xbe, 0x1d, 0x76, 0xad, 0x7d, 0x66,
	0xa8, 0x63, 0xe7, 0x32, 0x41, 0xdb, 0x75, 0x6c, 0xcd, 0xe5, 0x58, 0x53, 0x31, 0x21, 0xfd, 0xee,
	0x8a, 0xd9, 0xe7, 0x6b, 0x1c, 0xe6, 0xfb, 0x06, 0x7a, 0x3b, 0x21, 0x23, 0x83, 0x3c, 0xb7, 0x85,
	0x8c, 0x4e, 0x3b, 0xd3, 0xd9, 0x12, 0x79, 0xfe, 0x02, 0x66, 0xcb, 0xe8, 0xbd, 0xdc, 0x48, 0xb5,
	0x93, 0x61, 0x77, 0x27, 0x24, 0x81, 0x24, 0xcf, 0x8d, 0xca, 0x6f, 0xa2, 0x92, 0x42, 0xda, 0x1a,
	0xbd, 0xd0, 0x23, 0xc4, 0xe6, 0x18, 0xff, 0xdc, 0x84, 0xe1, 0xe2, 0xf2, 0x1a, 0x79, 0xa1, 0xe4,
	0x3e, 0xab, 0x90, 0x09, 0x7e, 0xb4, 0x59, 0xdb, 0xa1, 0x33, 0x18, 0x83, 0x96, 0xd5, 0xd7, 0xb5,
	0x6e, 0xbf, 0xd9, 0x57, 0xd0, 0x32, 0x77, 0x85, 0x0b, 0x3a, 0x3a, 0x1d, 0x4c, 0x67, 0x2e, 0xcc,
	0xf2, 0xae, 0xc0, 0x17, 0xde, 0xec, 0x7a, 0x19, 0xbd, 0x91, 0x62, 0x85, 0xa1, 0x25, 0x91, 0xb2,
	0x3c, 0xcf, 0x55, 0x14, 0x67, 0xa2, 0xa8, 0x14, 0xe9, 0x11, 0x70, 0x96, 0x89, 0x82, 0x8d, 0x61,
	0xb8, 0x77, 0x46, 0x39, 0xff, 0x58, 0x09, 0xd3, 0xaf, 0x09, 0x0b, 0xfe, 0x91, 0xfd, 0x0f, 0x06,
	0x96, 0xa3, 0xb1, 0x44, 0x7d, 0x8b, 0x41, 0xe7, 0x13, 0x25, 0x74, 0x10, 0x95, 0xee, 0xda, 0xec,
	0x3a, 0xc1, 0xac, 0x41, 0x3f, 0x6a, 0x8c, 0x95, 0xa0, 0x21, 0xa3, 0xbe, 0x7a, 0x76, 0x96, 0xfa,
	0x0e, 0xbb, 0x20, 0x68, 0xfc, 0x67, 0x8b, 0x54, 0x78, 0x97, 0xf1, 0x3b, 0xd4, 0x4e, 0x85, 0xa7,
	0x00, 0x3c, 0x8e, 0xd5, 0x56, 0x9a, 0x48, 0x24, 0x95, 0x14, 0x5e, 0x85, 0x5c, 0x24, 0x74, 0x86,
	0xdb, 0x12, 0x35, 0xf9, 0x9a, 0xee, 0x0c, 0xc9, 0xbc, 0x48, 0xd8, 0x63, 0xe8, 0xa1, 0x34, 0x2e,
	0x91, 0x1b, 0x88, 0xbd, 0xbd, 0xd7, 0xb0, 0x75, 0xa0, 0x21, 0x83, 0x56, 0x9c, 0x71, 0x69, 0x1b,
	0xf6, 0x42, 0xfb, 0xcd, 0xbe, 0x80, 0x96, 0x3d, 0xdd, 0xce, 0x3f, 0x9e, 0xae, 0xf5, 0xb3, 0x67,
	0xd0, 0xe1, 0x37, 0x65, 0xa1, 0x4a, 0xdb, 0x6f, 0xff, 0xb4, 0x3f, 0x3d, 0x5b, 0x94, 0xeb, 0x0f,
	0x18, 0x1b, 0xa5, 0xc3, 0xca, 0xc5, 0xbe, 0x84, 0x1e, 0xde, 0x21, 0x97, 0xeb, 0x0c, 0x6d, 0xe7,
	0x35, 0xed, 0xfb, 0x97, 0x04, 0x85, 0x7b, 0x27, 0x9b, 0xc2, 0xa0, 0xfe, 0x8e, 0x56, 0xbb, 0x24,
	0xf0, 0xfe, 0x1e, 0xb3, 0x5f, 0x13, 0x5e, 0xef, 0x12, 0xf6, 0x6f, 0xe8, 0xa4, 0xc8, 0x33, 0x93,
	0x06, 0xe0, 0x14, 0x70, 0x16, 0x1d, 0x02, 0xd7, 0xb9, 0xd2, 0x41, 0xdf, 0xcd, 0x8f, 0x35, 0x58,
	0x00, 0xdd, 0x55, 0xc6, 0xcb, 0x14, 0x93, 0x60, 0x60, 0xf5, 0xaf, 0x4d, 0x8a, 0x53, 0xe6, 0x6a,
	0x83, 0x49, 0x30, 0xb4, 0x8e, 0xca, 0xa2, 0x38, 0xb9, 0x92, 0x78, 0x17, 0x8c, 0x5c, 0x1c, 0x6b,
	0xb0, 0xff, 0x42, 0xdf, 0x5e, 0xb0, 0x68, 0x23, 0xb2, 0xac, 0x0c, 0xee, 0x5b, 0x1f, 0x58, 0xe8,
	0x0d, 0x21, 0xf6, 0xb4, 0xf7, 0x84, 0xb4, 0x0c, 0x7c, 0x37, 0x26, 0x7b, 0x46, 0x5a, 0x52, 0x2d,
	0x37, 0x5b, 0x2d, 0x69, 0x1d, 0x1d, 0xbb, 0x5a, 0x2a, 0xd3, 0xf5, 0x94, 0xe5, 0x68, 0x02, 0x76,
	0xd2, 0x98, 0xf4, 0xc2, 0xca, 0xa2, 0x69, 0x48, 0x70, 0xb5, 0x2d, 0x31, 0xda, 0x08, 0x13, 0x3c,
	0xb0, 0x3e, 0xcf, 0x21, 0x6f, 0x84, 0x61, 0x13, 0xe8, 0xee, 0xec, 0xe8, 0x97, 0xc1, 0x43, 0xbb,
	0x66, 0x46, 0xd3, 0xcf, 0xee, 0x54, 0x58, 0xbb, 0xc7, 0x3f, 0x35, 0xa0, 0xbf, 0xb8, 0x9c, 0xf3,
	0x1c, 0xdd, 0x98, 0x3d, 0x83, 0x76, 0x4e, 0xdb, 0xc7, 0x4e, 0x58, 0xff, 0x74, 0x38, 0x3d, 0xdc,
	0x46, 0xa1, 0xf3, 0x11, 0xc9, 0x6d, 0x98, 0xe6, 0x9e, 0xf4, 0x69, 0x4b, 0xd4, 0x0b, 0x67, 0x02,
	0xdd, 0xc2, 0xce, 0x6f, 0x19, 0x1c, 0xed, 0x6b, 0x38, 0x98, 0xe8, 0xb0, 0x76, 0x8f, 0x7f, 0xb1,
	0x4b, 0xef, 0x15, 0xe6, 0xea, 0x1c, 0x79, 0x82, 0x9a, 0x76, 0x55, 0xce, 0x8b, 0xc3, 0xfd, 0xd9,
	0xcd, 0x79, 0x51, 0x6d, 0x4f, 0xcf, 0x88, 0x78, 0x13, 0x69, 0xba, 0x55, 0x6e, 0xd2, 0x7b, 0x04,
	0x84, 0x54, 0x7c, 0x00, 0xdd, 0x5b, 0xd4, 0xa5, 0x50, 0xd2, 0x8e, 0xfa, 0x30, 0xac, 0x4d, 0xf6,
	0x7f, 0x18, 0x95, 0x34, 0xa2, 0xd1, 0x56, 0x0a, 0xc2, 0xdc, 0xcc, 0x0f, 0xc3, 0xa1, 0x45, 0xdf,
	0x57, 0xe0, 0x38, 0xa7, 0x67, 0x63, 0x29, 0xe2, 0x0d, 0x09, 0x6c, 0xf3, 0xd8, 0xfb, 0x55, 0x5f,
	0x37, 0x42, 0xce, 0x08, 0x60, 0xe3, 0xfa, 0x62, 0x3b, 0x05, 0x06, 0xd3, 0x03, 0x0d, 0xeb, 0x6b,
	0x7e, 0x02, 0x1d, 0xbb, 0xf5, 0xeb, 0xfe, 0x7b, 0xd3, 0xea, 0x85, 0x08, 0x2b, 0x7c, 0xfc, 0x5b,
	0x13, 0xe0, 0x03, 0x8f, 0xdf, 0xa2, 0xb9, 0x4a, 0x95, 0xd9, 0x17, 0x29, 0x92, 0xc8, 0x49, 0x63,
	0xf3, 0x76, 0xaa, 0x22, 0x45, 0xe2, 0xc4, 0xfb, 0x34, 0x50, 0x72, 0x9b, 0xdf, 0xa0, 0xae, 0x54,
	0x70, 0x03, 0xf5, 0xd6, 0x42, 0x24, 0x60, 0x2a, 0x4c, 0xb4, 0x5f, 0x86, 0xed, 0xb0, 0x9b, 0x0a,
	0x43, 0x7b, 0x90, 0xe6, 0xd5, 0x9d, 0xbd, 0xf3, 0xba, 0xc5, 0x07, 0xbb, 0xfd, 0xa2, 0x64, 0xdf,
	0xc1, 0xa3, 0x44, 0x94, 0x86, 0xcb, 0x18, 0x23, 0xa3, 0xa2, 0x74, 0xab, 0x4d, 0x64, 0xb8, 0x5e,
	0xa3, 0x7b, 0x1d, 0x9a, 0xe1, 0xc3, 0xda, 0xbd, 0x54, 0xe7, 0x5b, 0x6d, 0x96, 0xd6, 0xc7, 0x26,
	0xe0, 0x27, 0x98, 0x19, 0x1e, 0xdd, 0xf1, 0x5d, 0xb4, 0x13, 0x32, 0x51, 0xbb, 0xa0, 0x73, 0x72,
	0x34, 0x69, 0x86, 0x23, 0x8b, 0xff, 0xc0, 0x77, 0xd7, 0x16, 0x65, 0x5f, 0x03, 0x73, 0xcc, 0x42,
	0x98, 0x38, 0xad, 0xb9, 0x5d, 0xcb, 0x75, 0x31, 0xde, 0x91, 0xc3, 0xb1, 0x9f, 0xff, 0xde, 0x00,
	0x6f, 0x76, 0x2e, 0xcc, 0x5c, 0xab, 0x6d, 0xc1, 0xee, 0x43, 0x7f, 0x76, 0x3e, 0x8f, 0xe6, 0x28,
	0x51, 0x8b, 0xd8, 0xbf, 0xc7, 0x06, 0xd0, 0x23, 0x80, 0x06, 0xc7, 0x6f, 0xb0, 0x21, 0x71, 0xe7,
	0xd1, 0x59, 0x8a, 0xa5, 0xf1, 0x9b, 0x35, 0xfb, 0xca, 0xa8, 0x9c, 0xc7, 0xa9, 0x7f, 0x54, 0x03,
	0x97, 0xb8, 0x32, 0x2f, 0x75, 0xee, 0xb7, 0x98, 0x0f, 0x03, 0x02, 0x42, 0xb1, 0x4e, 0x2d, 0xd2,
	0x3e, 0xa4, 0x5c, 0xe2, 0xda, 0xef, 0x7c, 0x46, 0x21, 0xa4, 0x5b, 0xe7, 0x9c, 0x23, 0xd7, 0x7e,
	0xaf, 0xb6, 0x16, 0xa2, 0x2c, 0x7d, 0xef, 0xf9, 0x6b, 0x68, 0xdb, 0xed, 0xc8, 0x46, 0x70, 0xb0,
	0x1f, 0xfd, 0x7b, 0x36, 0xcc, 0x32, 0xba, 0x2a, 0x30, 0x36, 0xdc, 0x28, 0xed, 0x37, 0x2a, 0x64,
	0x89, 0x5a, 0x2b, 0x2d, 0x6c, 0xbd, 0x1e, 0xfd, 0x1c, 0x9d, 0x2d, 0xfd, 0xa3, 0xe7, 0x7f, 0x34,
	0xa0, 0x7f, 0xf0, 0x7c, 0xd9, 0xce, 0xea, 0x07, 0xcc, 0xbf, 0x67, 0xa3, 0x5f, 0x2f, 0xa3, 0x77,
	0xa2, 0x34, 0x2a, 0xf3, 0x1b, 0xec, 0x5f, 0x70, 0x4c, 0xf6, 0xd5, 0xf6, 0x66, 0xc1, 0xe3, 0x54,
	0x48, 0x9c, 0x6f, 0xa5, 0xdf, 0xac, 0xff, 0x0a, 0xc5, 0x2a, 0xc3, 0xaa, 0x7d, 0x62, 0xa5, 0xca,
	0xac, 0xb7, 0xd2, 0x6f, 0xb1, 0x07, 0x70, 0xdf, 0x02, 0x52, 0x14, 0xa8, 0x1d, 0xab, 0xcd, 0x18,
	0x8c, 0x08, 0x3c, 0x08, 0xd4, 0x61, 0x00, 0x1d, 0xc2, 0xce, 0xbe, 0xf5, 0xbb, 0x75, 0x94, 0xb9,
	0x46, 0xc9, 0x13, 0xf4, 0x7b, 0xec, 0x18, 0x86, 0x04, 0xcc, 0x7e, 0xdc, 0x8a, 0x22, 0x47, 0x69,
	0x7c, 0x6f, 0x5f, 0x8f, 0xe1, 0xf1, 0x86, 0xdf, 0x64, 0x78, 0x61, 0x30, 0xf7, 0xa1, 0xfe, 0xb5,
	0x56, 0xa5, 0xff, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0x6a, 0xd7, 0xee, 0xca, 0x09, 0x00,
	0x00,
}
